// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  clerkUserId     String           @unique
  email           String           @unique
  name            String?
  imageUrl        String?
  industry        String?
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // profile fields
  bio        String?
  experience Int?     @default(0) // years of experience
  location   String?
  skills     String[]

  assessments Assessment[]
  resume      Resume?
  coverLetter CoverLetter[]
}

model Assessment {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  quizScore      Float
  questions      Json[]
  category       String  //"technical", "Behavioral", etc.
  improvementTip String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model Resume {
  id        String   @id @default(cuid())
  userId    String   @unique // one resume per user
  user      User     @relation(fields: [userId], references: [id])
  content   String   @db.Text
  atsScore  Float?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoverLetter {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  content        String   @db.Text
  jobDescription String?
  jobTitle       String
  companyName    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model IndustryInsight {
  id String @id @default(cuid())
  industry String @unique
  
  // users in this industry 
  users User[]

  // Salary data 
  salaryRanges Json[] // Array of {role: string, min: float, max: float, median: float, location: string?}
  lastSalaryUpdate DateTime @default(now())

  // Industry trends
  growthRate Float?
  demandLevel DemandLevel // "High", "Medium", "Low"
  topSkills String[]

  // Market Conditions
  marketOutlook MarketOutlook // "Positive", "Neutral", "Negative"
  keyTrends String[] 

  // Learning suggestions
  recommendedSkills String[] 
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([industry])
}

enum DemandLevel{
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook{
  POSITIVE
  NEUTRAL
  NEGATIVE
}
